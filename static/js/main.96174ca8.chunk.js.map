{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["auth","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","storage","Home","className","App","useState","user","setUser","username","setUsername","userImageUrl","setUserImageUrl","content","setContent","useEffect","unsubscribe","onAuthStateChanged","authUser","console","log","responseGoogle","googleUser","alert","profile","getBasicProfile","getName","getImageUrl","firebaseUser","providerData","i","length","providerId","GoogleAuthProvider","PROVIDER_ID","uid","getId","isUserEqual","credential","getAuthResponse","id_token","signInWithCredential","catch","error","code","errorMessage","message","email","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","Avatar","src","alt","clientId","buttonText","icon","theme","onLogoutSuccess","signOut","onSuccess","onFailure","cookiePolicy","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96174ca8.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyDr6-gZetzinnJ1_97-Wn2p2IYRJ9SRljs\",\r\n  authDomain: \"scceventreact.firebaseapp.com\",\r\n  databaseURL: \"https://scceventreact.firebaseio.com\",\r\n  projectId: \"scceventreact\",\r\n  storageBucket: \"scceventreact.appspot.com\",\r\n  messagingSenderId: \"657034582508\",\r\n  appId: \"1:657034582508:web:59a565f5de7074c0cf08c9\",\r\n  measurementId: \"G-HHM6L4DYSF\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db, auth, storage };","import React, { useState, useEffect } from 'react';\r\nimport firebase from 'firebase';\r\nimport { db, auth } from './firebase';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { GoogleLogin, useGoogleLogin, GoogleLogout } from 'react-google-login';\r\n\r\nconst Home = () => {\r\n\treturn (\r\n\t\t<div className=\"col-md-6 order-md-1 text-center text-md-left pr-md-5\">\r\n\t\t\t<h1 className=\"mb-3\">SCC Events</h1>\r\n\t\t\t<p className=\"lead\">Explore activities and competitions with tags and subscribe functions.</p>\r\n\t\t\t<p className=\"lead\">SCC Events is a webpage for SCC students to know more about competitions and activities held by school or other organizations.\r\n\t\t\tSearch by tag or subscribe to favourite tags for a quick view of your preferred events.</p>\r\n\t\t\t<p className=\"lead\">Sign in with your school Gmail account to enjoy the service!</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction App() {\r\n\tconst [user, setUser] = useState(null);\r\n\tconst [username, setUsername] = useState(\"\");\r\n\tconst [userImageUrl, setUserImageUrl] = useState(\"\");\r\n\tconst [content, setContent] = useState(1);\r\n\t\r\n\tuseEffect(() => {\r\n\t\tconst unsubscribe = auth.onAuthStateChanged((authUser) => {\r\n\t\t\tif (authUser) {\r\n\t\t\t\tconsole.log(authUser);\r\n\t\t\t\tsetUser(authUser);\r\n\t\t\t} else {\r\n\t\t\t\tsetUser(null);\r\n\t\t\t}\r\n\t\t})\r\n\t\t\r\n\t\treturn () => {\r\n\t\t\tunsubscribe();\r\n\t\t}\r\n\t}, [user]);\r\n\t\r\n\tconst responseGoogle = (googleUser) => {\r\n\t\talert('Login successfully ');\r\n\t\tvar profile = googleUser.getBasicProfile();\r\n\t\tsetUsername(profile.getName());\r\n\t\tsetUserImageUrl(profile.getImageUrl());\r\n\t\tconsole.log('Google Auth Response', googleUser);\r\n\t\t// We need to register an Observer on Firebase Auth to make sure auth is initialized.\r\n\t\tvar unsubscribe = firebase.auth().onAuthStateChanged(function(firebaseUser) {\r\n\t\t\tunsubscribe();\r\n\t\t\t// Check if we are already signed-in Firebase with the correct user.\r\n\t\t\tif (!isUserEqual(googleUser, firebaseUser)) {\r\n\t\t\t\t// Build Firebase credential with the Google ID token.\r\n\t\t\t\tvar credential = firebase.auth.GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\r\n\t\t\t\t// Sign in with credential from the Google user.\r\n\t\t\t\tfirebase.auth()\r\n\t\t\t\t.signInWithCredential(credential)\r\n\t\t\t\t.catch(function(error) {\r\n\t\t\t\t\t// Handle Errors here.\r\n\t\t\t\t\tvar errorCode = error.code;\r\n\t\t\t\t\tvar errorMessage = error.message;\r\n\t\t\t\t\t// The email of the user's account used.\r\n\t\t\t\t\tvar email = error.email;\r\n\t\t\t\t\t// The firebase.auth.AuthCredential type that was used.\r\n\t\t\t\t\tvar credential = error.credential;\r\n\t\t\t\t\t// ...\r\n\t\t\t\t\talert(errorMessage);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\tfunction isUserEqual(googleUser, firebaseUser) {\r\n\t\tif (firebaseUser) {\r\n\t\t\tvar providerData = firebaseUser.providerData;\r\n\t\t\tfor (var i = 0; i < providerData.length; i++) {\r\n\t\t\t\tif (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\r\n\t\t\t\tproviderData[i].uid === googleUser.getBasicProfile().getId()) {\r\n\t\t\t\t\t// We don't need to reauth the Firebase connection.\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tconst logout = () => {\r\n\t\tauth.signOut();\r\n\t\talert(\"Logout successfully\");\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\r\n\t\t\t\t<a className=\"navbar-brand\" href=\"#\">SCC Events</a>\r\n\t\t\t\t<button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarToggler\" aria-controls=\"navbarToggler\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n\t\t\t\t\t<span className=\"navbar-toggler-icon\"></span>\r\n\t\t\t\t</button>\r\n\t\t\t\t<div className=\"collapse navbar-collapse\" id=\"navbarToggler\">\r\n\t\t\t\t\t<ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n\t\t\t\t\t\t<li className=\"nav-item active\">\r\n\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"#\" onClick={() => setContent(1)}>Home</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"nav-item active\">\r\n\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"#\" onClick={() => setContent(2)}>Add Event</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"nav-item active\">\r\n\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"#\" onClick={() => setContent(3)}>Manage Event</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"nav-item active\">\r\n\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"#\" onClick={() => setContent(4)}>Manage Subscription</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"nav-item active\">\r\n\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"#\" onClick={() => setContent(5)}>Subscribed tags</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{ user?(\r\n\t\t\t\t\t\t<div className=\"user_login\">\r\n\t\t\t\t\t\t\t<Avatar \r\n\t\t\t\t\t\t\t\tclassName=\"avatar\"\r\n\t\t\t\t\t\t\t\tsrc={userImageUrl}\r\n\t\t\t\t\t\t\t\talt={username}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<GoogleLogout\r\n\t\t\t\t\t\t\t\tclassName=\"logout_button\"\r\n\t\t\t\t\t\t\t\tclientId=\"657034582508-5drsonnejd5qqm6emjql59vcbq62iics.apps.googleusercontent.com\"\r\n\t\t\t\t\t\t\t\tbuttonText=\"Sign out\"\r\n\t\t\t\t\t\t\t\ticon={false}\r\n\t\t\t\t\t\t\t\ttheme=\"dark\"\r\n\t\t\t\t\t\t\t\tonLogoutSuccess={logout}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t</GoogleLogout>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t):(\r\n\t\t\t\t\t\t<GoogleLogin\r\n\t\t\t\t\t\t\tclientId=\"657034582508-5drsonnejd5qqm6emjql59vcbq62iics.apps.googleusercontent.com\"\r\n\t\t\t\t\t\t\tbuttonText=\"Sign in with Google\"\r\n\t\t\t\t\t\t\tonSuccess={responseGoogle}\r\n\t\t\t\t\t\t\tonFailure={responseGoogle}\r\n\t\t\t\t\t\t\tcookiePolicy={'single_host_origin'}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</nav>\r\n\t\t\t{ content===1 ? (\r\n\t\t\t\t<Home />\r\n\t\t\t):content===2 ? (\r\n\t\t\t\t<div>2</div>\r\n\t\t\t):(\r\n\t\t\t\t<div>else</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}