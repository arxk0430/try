{"version":3,"sources":["SignIn.js","App.js","reportWebVitals.js","index.js"],"names":["SignIn","app","Realm","id","UserDetail","user","Login","setUser","loginAnonymous","a","logIn","anonymous","onClick","App","React","useState","currentUser","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAmGeA,IC1FTC,EAAM,IAAIC,IAAU,CAAEC,GADP,wBAIrB,SAASC,EAAT,GAA+B,IAATC,EAAQ,EAARA,KACpB,OACE,8BACE,+DAAkCA,EAAKF,QAM7C,SAASG,EAAT,GAA6B,IAAZC,EAAW,EAAXA,QACTC,EAAc,uCAAG,4BAAAC,EAAA,sEACFR,EAAIS,MAAMR,IAAkBS,aAD1B,OACfN,EADe,OAErBE,EAAQF,GAFa,2CAAH,qDAIpB,OAAO,wBAAQO,QAASJ,EAAjB,oBA6BMK,MAjBf,WAAe,MAGWC,IAAMC,SAASd,EAAIe,aAH9B,mBAGNX,EAHM,KAGAE,EAHA,KAOb,OACE,sBAAKU,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACGZ,EAAO,cAACD,EAAD,CAAYC,KAAMA,IAAW,cAACC,EAAD,CAAOC,QAASA,MAFzD,SClCWW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0d43a46d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as Realm from \"realm-web\";\r\n\r\nconst RealmAppContext = React.createContext();\r\n\r\nexport const useRealmApp = () => {\r\n  const app = React.useContext(RealmAppContext);\r\n  if (!app) {\r\n    throw new Error(\r\n      `You must call useRealmApp() inside of a <RealmAppProvider />`\r\n    );\r\n  }\r\n  return app;\r\n};\r\n\r\nfunction SignIn() {\r\n\tconst app = useRealmApp();\r\n\tconst [mode, setMode]  = React.useState(\"signIn\");\r\n\tconst toggleMode = () => {\r\n\t\tsetMode((oldMode) => (oldMode === \"signIn\" ? \"signUp\" : \"signIn\"));\r\n\t};\r\n\t\r\n\tconst [username, setUsername] = React.useState(\"\");\r\n\tconst [email, setEmail] = React.useState(\"\");\r\n\tconst [password, setPassword] = React.useState(\"\");\r\n\t\r\n\tReact.useEffect(() => {\r\n\t\tsetUsername(\"\");\r\n\t\tsetEmail(\"\");\r\n\t\tsetPassword(\"\");\r\n\t}, [mode]);\r\n\r\n\tconst signIn = async () => {\r\n\t\ttry {\r\n\t\t\tawait app.logIn(Realm.Credentials.emailPassword(email, password));\r\n\t\t} catch (error) {\r\n\t\t\talert(error.message)\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst signUp = async () => {\r\n\t\ttry {\r\n\t\t\tawait app.emailPasswordAuth.registerUser(email, password);\r\n\t\t} catch (error) {\r\n\t\t\talert(error.message)\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t{mode === \"signIn\" ? (\r\n\t\t\t<form className=\"signInForm\">\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype = \"text\"\r\n\t\t\t\t\tplaceholder = \"email\"\r\n\t\t\t\t\tvalue = {email}\r\n\t\t\t\t\tonChange = {(e) => setEmail(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype = \"password\"\r\n\t\t\t\t\tplaceholder = \"password\"\r\n\t\t\t\t\tvalue = {password}\r\n\t\t\t\t\tonChange = {(e) => setPassword(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<button type=\"submit\" onClick={signIn}>Sign up</button>\r\n\t\t\t</form>\r\n\t\t\t//<button onClick={(e) => {toggleMode();}}>\r\n\t\t\t//\tGo to sign up\r\n\t\t\t//</button>\r\n\t\t) : (\r\n\t\t\t<form className=\"signUpForm\">\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype = \"username\"\r\n\t\t\t\t\tplaceholder = \"username\"\r\n\t\t\t\t\tvalue = {username}\r\n\t\t\t\t\tonChange = {(e) => setUsername(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype = \"text\"\r\n\t\t\t\t\tplaceholder = \"email\"\r\n\t\t\t\t\tvalue = {email}\r\n\t\t\t\t\tonChange = {(e) => setEmail(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype = \"password\"\r\n\t\t\t\t\tplaceholder = \"password\"\r\n\t\t\t\t\tvalue = {password}\r\n\t\t\t\t\tonChange = {(e) => setPassword(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<button type=\"submit\" onClick={signUp}>Sign up</button>\r\n\t\t\t</form>\r\n\t\t\t//<button onClick={(e) => {toggleMode();}}>\r\n\t\t\t//\tGo to sign in\r\n\t\t\t//</button>\r\n\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SignIn;","import React from \"react\";\nimport SignIn from \"./SignIn\"\nimport \"./styles.css\";\n\n// Import the MongoDB Realm Web SDK\nimport * as Realm from \"realm-web\";\n\n// Connect to your MongoDB Realm app\nconst REALM_APP_ID = \"application-0-exwhb\"; // e.g. myapp-abcde\nconst app = new Realm.App({ id: REALM_APP_ID });\n\t\n// Create a component that displays the given user's details\nfunction UserDetail({ user }) {\n  return (\n    <div>\n      <h1>Logged in with anonymous id: {user.id}</h1>\n    </div>\n  );\n}\n\n// Create a component that lets an anonymous user log in\nfunction Login({ setUser }) {\n  const loginAnonymous = async () => {\n    const user = await app.logIn(Realm.Credentials.anonymous());\n    setUser(user);\n  };\n  return <button onClick={loginAnonymous}>Log In</button>;\n}\n\n/* Register({ setUser }) {\n\tconst register = async () = > {\n\t\tconst email = \"arxkjp@gmail.com\";\n\t\tconst password = \"12345678\";\n\t\tawait app.emailPasswordAuth.registerUser(email, password);\n\t}\n\treturn <button onClick={register}>Register</button>\n}*/\n\nfunction App() {\n  // Keep the logged in Realm user in local state. This lets the app re-render\n  // whenever the current user changes (e.g. logs in or logs out).\n  const [user, setUser] = React.useState(app.currentUser);\n\n  // If a user is logged in, show their details.\n  // Otherwise, show the login screen.\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        {user ? <UserDetail user={user} /> : <Login setUser={setUser} />}\n      </div>\n\t  hi\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}